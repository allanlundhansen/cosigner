package io.emax.heimdal.ethereum;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;

import io.emax.heimdal.ethereum.common.ByteUtilities;
import io.emax.heimdal.ethereum.common.DeterministicTools;
import io.emax.heimdal.ethereum.common.RLP;
import io.emax.heimdal.ethereum.common.RLPEntity;
import io.emax.heimdal.ethereum.common.RLPItem;
import io.emax.heimdal.ethereum.common.RLPList;
import io.emax.heimdal.ethereum.common.Secp256k1;
import io.emax.heimdal.ethereum.gethrpc.DefaultBlock;
import io.emax.heimdal.ethereum.gethrpc.EthereumRpc;

public class Wallet implements io.emax.heimdal.api.currency.Wallet {
  private EthereumRpc ethereumRpc = EthereumResource.getResource().getBitcoindRpc();
  private CurrencyConfiguration config = new CurrencyConfiguration();
  private static HashMap<String, Integer> addressRounds = new HashMap<>();
  private static HashMap<String, String> msigContracts = new HashMap<>();

  public Wallet() {
    // TODO contract may very likely change, current one is a little on the large size
    String contractPayload = "0x606060405236156100b95760e060020a6000350463173825d9811461010b5780632f54bf6e146101665780634123cb6b1461018e5780635c52c2f5146101975780637065cb48146101c8578063746c9171146101fc578063797af62714610205578063b20d30a914610218578063b61d27f61461024c578063b75c7dc61461026d578063ba51a6df1461029c578063c2cf7326146102d0578063cbf0b0c01461030e578063f00d4b5d14610342578063f1736d861461037b575b61038560003411156101095760408051600160a060020a033216815234602082015281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a15b565b61038560043560006000364360405180848480828437505050909101908152604051908190036020019020905061068a815b600160a060020a03321660009081526101026020526040812054818082811415610c0057610d58565b6103876004355b600160a060020a03811660009081526101026020526040812054115b919050565b61038760015481565b610385600036436040518084848082843750505090910190815260405190819003602001902090506107db8161013d565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506106028161013d565b61038760005481565b6103876004355b600081610a3e8161013d565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506107cf8161013d565b6103876004803590602480359160443591820191013560006107fa3261016d565b610385600435600160a060020a0332166000908152610102602052604081205490808281141561039957610418565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506107498161013d565b610387600435602435600082815261010360209081526040808320600160a060020a038516845261010290925282205482818114156107a2576107c6565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506107e98161013d565b6103856004356024356000600036436040518084848082843750505090910190815260405190819003602001902090506104a38161013d565b6103876101055481565b005b60408051918252519081900360200190f35b50506000828152610103602052604081206001810154600284900a9290831611156104185780546001828101805492909101835590839003905560408051600160a060020a03321681526020810186905281517fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b929181900390910190a15b50505050565b600160a060020a03831660028361010081101561000257508301819055600160a060020a03851660008181526101026020908152604080832083905584835291829020869055815192835282019290925281517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c929181900390910190a1505b505050565b15610418576104b18361016d565b156104bc575061049e565b600160a060020a0384166000908152610102602052604081205492508214156104e5575061049e565b61041e5b6101045460005b81811015610ea557610104805461010891600091849081101561000257600080516020610f6083398151915201548252506020918252604081208054600160a060020a0319168155600181018290556002810180548382559083528383209193610f2a92601f9290920104810190610a26565b60018054810190819055600160a060020a038316906002906101008110156100025790900160005081905550600160005054610102600050600084600160a060020a03168152602001908152602001600020600050819055507f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c3826040518082600160a060020a0316815260200191505060405180910390a15b505b50565b156105fd576106108261016d565b1561061b57506105ff565b6106236104e9565b60015460fa90106106385761063661064d565b505b60015460fa901061056357506105ff565b6107075b600060015b600154811015610a3a575b6001548110801561067d5750600281610100811015610002570154600014155b15610d605760010161065d565b1561049e57600160a060020a0383166000908152610102602052604081205492508214156106b857506105fd565b60016001600050540360006000505411156106d357506105fd565b600060028361010081101561000257508301819055600160a060020a038416815261010260205260408120556106496104e9565b5060408051600160a060020a038516815290517f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da9181900360200190a1505050565b156105fd5760015482111561075e57506105ff565b600082905561076b6104e9565b6040805183815290517facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da9181900360200190a15050565b506001820154600282900a908116600014156107c157600093506107c6565b600193505b50505092915050565b156105fd575061010555565b156105ff5760006101065550565b156105fd5781600160a060020a0316ff5b15610a165761080e846000610e3a3261016d565b156108ca577f92ca3a80853e6663fa31fa10b99225f18d4902939b4c53a9caae9043f6efd00432858786866040518086600160a060020a0316815260200185815260200184600160a060020a031681526020018060200182810382528484828181526020019250808284378201915050965050505050505060405180910390a184600160a060020a03168484846040518083838082843750505090810191506000908083038185876185025a03f15060009350610a1692505050565b600036436040518084848082843750505090910190815260405190819003602001902091506108fa90508161020c565b15801561091d575060008181526101086020526040812054600160a060020a0316145b15610a165760008181526101086020908152604082208054600160a060020a03191688178155600181018790556002018054858255818452928290209092601f01919091048101908490868215610a1e579182015b82811115610a1e578235826000505591602001919060010190610972565b50507f1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf328132868887876040518087815260200186600160a060020a0316815260200185815260200184600160a060020a03168152602001806020018281038252848482818152602001925080828437820191505097505050505050505060405180910390a15b949350505050565b506109909291505b80821115610a3a5760008155600101610a26565b5090565b15610bed5760008381526101086020526040812054600160a060020a031614610bed5760408051600091909120805460018201546002929092018054600160a060020a0392909216939091819083908015610abe57820191906000526020600020905b815481529060010190602001808311610aa157829003601f168201915b505091505060006040518083038185876185025a03f150505060008481526101086020908152604080519281902080546001820154600160a060020a033281811688529587018b905293860181905292166060850181905260a06080860181815260029390930180549187018290527fe7c957c06e9a662c1a6c77366179f5b702b97651dc28eee7d5bf1dff6e40bb4a975094958a959293909160c083019084908015610b9057820191906000526020600020905b815481529060010190602001808311610b7357829003601f168201915b5050965050505050505060405180910390a160008381526101086020908152604082208054600160a060020a031916815560018101839055600281018054848255908452828420919392610bf392601f9290920104810190610a26565b50919050565b5050506001915050610189565b60008581526101036020526040812080549093501415610c88576000805483556001838101919091556101048054918201808255828015829011610c5757818360005260206000209182019101610c579190610a26565b50505060028301819055610104805487929081101561000257600091909152600080516020610f6083398151915201555b506001810154600283900a90811660001415610d585760408051600160a060020a03321681526020810187905281517fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda929181900390910190a1815460019011610d45576000858152610103602052604090206002015461010480549091908110156100025760406000908120600080516020610f608339815191529290920181905580825560018083018290556002909201559450610d589050565b8154600019018255600182018054821790555b505050919050565b5b60018054118015610d8357506001546002906101008110156100025701546000145b15610d975760018054600019019055610d61565b60015481108015610dba5750600154600290610100811015610002570154600014155b8015610dd457506002816101008110156100025701546000145b15610e3557600154600290610100811015610002578101549082610100811015610002578101919091558190610102906000908361010081101561000257810154825260209290925260408120929092556001546101008110156100025701555b610652565b156101895761010754610e505b62015180420490565b1115610e6957600061010655610e64610e47565b610107555b6101065480830110801590610e875750610106546101055490830111155b15610e9d57506101068054820190556001610189565b506000610189565b6105fd6101045460005b81811015610f355761010480548290811015610002576000918252600080516020610f60833981519152015414610f2257610104805461010391600091849081101561000257600080516020610f6083398151915201548252506020919091526040812081815560018101829055600201555b600101610eaf565b5050506001016104f0565b610104805460008083559190915261049e90600080516020610f6083398151915290810190610a2656004c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe";
    String txCount =
        ethereumRpc.eth_getTransactionCount("0x" + config.getContractAccount(), DefaultBlock.latest.toString());
    int rounds = new BigInteger(1, ByteUtilities.toByteArray(txCount)).intValue();
    for(int i = 0; i < rounds; i++){
      RLPList contractAddress = new RLPList();
      RLPItem contractCreator = new RLPItem(ByteUtilities.toByteArray(config.getContractAccount()));
      RLPItem nonce = new RLPItem(ByteUtilities.stripLeadingNullBytes(BigInteger.valueOf(i).toByteArray()));
      contractAddress.add(contractCreator);
      contractAddress.add(nonce);
      
      String contract = DeterministicTools.hashSha3(ByteUtilities.toHexString(contractAddress.encode())).substring(96/4, 256/4);
      String contractCode = ethereumRpc.eth_getCode("0x" + contract.toLowerCase(), DefaultBlock.latest.toString());
      
      if(contractCode.equalsIgnoreCase(contractPayload)) {
        // We found an existing contract, data @ 4 should be the user address
        String userAddress = ethereumRpc.eth_getStorageAt("0x"+contract.toLowerCase(), "0x04", DefaultBlock.latest.toString());
        userAddress = ByteUtilities.toHexString(ByteUtilities.stripLeadingNullBytes(ByteUtilities.toByteArray(userAddress)));
        msigContracts.put(userAddress.toLowerCase(), contract);        
      }
    }
    
  }
  
  @Override
  public String createAddress(String name) {
    // Generate the next private key
    int rounds = 1;
    if (addressRounds.containsKey(name)) {
      rounds = addressRounds.get(name);
    }
    addressRounds.put(name, rounds);
    String privateKey =
        DeterministicTools.getDeterministicPrivateKey(name, config.getServerPrivateKey(), rounds);

    // Convert to an Ethereum address
    String publicAddress = DeterministicTools.getPublicAddress(privateKey);

    return publicAddress;
  }

  @Override
  public Iterable<String> getAddresses(String name) {
    // TODO Figure out how we're going to track multi-sig contracts without storing their address.
    int maxRounds = 1;
    if (addressRounds.containsKey(name)) {
      maxRounds = addressRounds.get(name);
    }

    LinkedList<String> addresses = new LinkedList<>();
    for (int i = 0; i < maxRounds; i++) {
      addresses.add(DeterministicTools.getPublicAddress(
          DeterministicTools.getDeterministicPrivateKey(name, config.getServerPrivateKey(), i)));
    }
    
    LinkedList<String> contracts = new LinkedList<>();
    for(String address : addresses){
      if(msigContracts.containsKey(address.toLowerCase())){
        contracts.add(msigContracts.get(address.toLowerCase()));
      }
    }

    return contracts;
  }

  @Override
  public String getMultiSigAddress(Iterable<String> addresses, String name) {
    // Look for existing msig account for this address.
    String userAddress = addresses.iterator().next();
    if(msigContracts.containsKey(userAddress.toLowerCase())) {
      return msigContracts.get(userAddress).toLowerCase();
    }
    
    RLPList tx = new RLPList();
    RLPItem nonce = new RLPItem();
    RLPItem gasPrice = new RLPItem(ByteUtilities
        .stripLeadingNullBytes(BigInteger.valueOf(config.getGasPrice()).toByteArray()));
    RLPItem gasLimit = new RLPItem(ByteUtilities
        .stripLeadingNullBytes(BigInteger.valueOf(config.getMsigTxGas()).toByteArray()));
    RLPItem to = new RLPItem();
    RLPItem value = new RLPItem();
    
    // Setup parameters for contract
    String contractInit = "606060405260405161109d38038061109d83398101604052805160805160a051919092019190808383815160019081018155600090600160a060020a0332169060029060038390559183525061010260205260408220555b82518110156100e257828181518110156100025790602001906020020151600160a060020a03166002600050826002016101008110156100025790900160005081905550806002016101026000506000858481518110156100025790602001906020020151600160a060020a0316815260200190815260200160002060005081905550600101610057565b81600060005081905550505050806101056000508190555061010662015180420490565b6101075550505050610f808061011d6000396000f300606060405236156100b95760e060020a6000350463173825d9811461010b5780632f54bf6e146101665780634123cb6b1461018e5780635c52c2f5146101975780637065cb48146101c8578063746c9171146101fc578063797af62714610205578063b20d30a914610218578063b61d27f61461024c578063b75c7dc61461026d578063ba51a6df1461029c578063c2cf7326146102d0578063cbf0b0c01461030e578063f00d4b5d14610342578063f1736d861461037b575b61038560003411156101095760408051600160a060020a033216815234602082015281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a15b565b61038560043560006000364360405180848480828437505050909101908152604051908190036020019020905061068a815b600160a060020a03321660009081526101026020526040812054818082811415610c0057610d58565b6103876004355b600160a060020a03811660009081526101026020526040812054115b919050565b61038760015481565b610385600036436040518084848082843750505090910190815260405190819003602001902090506107db8161013d565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506106028161013d565b61038760005481565b6103876004355b600081610a3e8161013d565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506107cf8161013d565b6103876004803590602480359160443591820191013560006107fa3261016d565b610385600435600160a060020a0332166000908152610102602052604081205490808281141561039957610418565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506107498161013d565b610387600435602435600082815261010360209081526040808320600160a060020a038516845261010290925282205482818114156107a2576107c6565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506107e98161013d565b6103856004356024356000600036436040518084848082843750505090910190815260405190819003602001902090506104a38161013d565b6103876101055481565b005b60408051918252519081900360200190f35b50506000828152610103602052604081206001810154600284900a9290831611156104185780546001828101805492909101835590839003905560408051600160a060020a03321681526020810186905281517fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b929181900390910190a15b50505050565b600160a060020a03831660028361010081101561000257508301819055600160a060020a03851660008181526101026020908152604080832083905584835291829020869055815192835282019290925281517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c929181900390910190a1505b505050565b15610418576104b18361016d565b156104bc575061049e565b600160a060020a0384166000908152610102602052604081205492508214156104e5575061049e565b61041e5b6101045460005b81811015610ea557610104805461010891600091849081101561000257600080516020610f6083398151915201548252506020918252604081208054600160a060020a0319168155600181018290556002810180548382559083528383209193610f2a92601f9290920104810190610a26565b60018054810190819055600160a060020a038316906002906101008110156100025790900160005081905550600160005054610102600050600084600160a060020a03168152602001908152602001600020600050819055507f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c3826040518082600160a060020a0316815260200191505060405180910390a15b505b50565b156105fd576106108261016d565b1561061b57506105ff565b6106236104e9565b60015460fa90106106385761063661064d565b505b60015460fa901061056357506105ff565b6107075b600060015b600154811015610a3a575b6001548110801561067d5750600281610100811015610002570154600014155b15610d605760010161065d565b1561049e57600160a060020a0383166000908152610102602052604081205492508214156106b857506105fd565b60016001600050540360006000505411156106d357506105fd565b600060028361010081101561000257508301819055600160a060020a038416815261010260205260408120556106496104e9565b5060408051600160a060020a038516815290517f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da9181900360200190a1505050565b156105fd5760015482111561075e57506105ff565b600082905561076b6104e9565b6040805183815290517facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da9181900360200190a15050565b506001820154600282900a908116600014156107c157600093506107c6565b600193505b50505092915050565b156105fd575061010555565b156105ff5760006101065550565b156105fd5781600160a060020a0316ff5b15610a165761080e846000610e3a3261016d565b156108ca577f92ca3a80853e6663fa31fa10b99225f18d4902939b4c53a9caae9043f6efd00432858786866040518086600160a060020a0316815260200185815260200184600160a060020a031681526020018060200182810382528484828181526020019250808284378201915050965050505050505060405180910390a184600160a060020a03168484846040518083838082843750505090810191506000908083038185876185025a03f15060009350610a1692505050565b600036436040518084848082843750505090910190815260405190819003602001902091506108fa90508161020c565b15801561091d575060008181526101086020526040812054600160a060020a0316145b15610a165760008181526101086020908152604082208054600160a060020a03191688178155600181018790556002018054858255818452928290209092601f01919091048101908490868215610a1e579182015b82811115610a1e578235826000505591602001919060010190610972565b50507f1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf328132868887876040518087815260200186600160a060020a0316815260200185815260200184600160a060020a03168152602001806020018281038252848482818152602001925080828437820191505097505050505050505060405180910390a15b949350505050565b506109909291505b80821115610a3a5760008155600101610a26565b5090565b15610bed5760008381526101086020526040812054600160a060020a031614610bed5760408051600091909120805460018201546002929092018054600160a060020a0392909216939091819083908015610abe57820191906000526020600020905b815481529060010190602001808311610aa157829003601f168201915b505091505060006040518083038185876185025a03f150505060008481526101086020908152604080519281902080546001820154600160a060020a033281811688529587018b905293860181905292166060850181905260a06080860181815260029390930180549187018290527fe7c957c06e9a662c1a6c77366179f5b702b97651dc28eee7d5bf1dff6e40bb4a975094958a959293909160c083019084908015610b9057820191906000526020600020905b815481529060010190602001808311610b7357829003601f168201915b5050965050505050505060405180910390a160008381526101086020908152604082208054600160a060020a031916815560018101839055600281018054848255908452828420919392610bf392601f9290920104810190610a26565b50919050565b5050506001915050610189565b60008581526101036020526040812080549093501415610c88576000805483556001838101919091556101048054918201808255828015829011610c5757818360005260206000209182019101610c579190610a26565b50505060028301819055610104805487929081101561000257600091909152600080516020610f6083398151915201555b506001810154600283900a90811660001415610d585760408051600160a060020a03321681526020810187905281517fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda929181900390910190a1815460019011610d45576000858152610103602052604090206002015461010480549091908110156100025760406000908120600080516020610f608339815191529290920181905580825560018083018290556002909201559450610d589050565b8154600019018255600182018054821790555b505050919050565b5b60018054118015610d8357506001546002906101008110156100025701546000145b15610d975760018054600019019055610d61565b60015481108015610dba5750600154600290610100811015610002570154600014155b8015610dd457506002816101008110156100025701546000145b15610e3557600154600290610100811015610002578101549082610100811015610002578101919091558190610102906000908361010081101561000257810154825260209290925260408120929092556001546101008110156100025701555b610652565b156101895761010754610e505b62015180420490565b1115610e6957600061010655610e64610e47565b610107555b6101065480830110801590610e875750610106546101055490830111155b15610e9d57506101068054820190556001610189565b506000610189565b6105fd6101045460005b81811015610f355761010480548290811015610002576000918252600080516020610f60833981519152015414610f2257610104805461010391600091849081101561000257600080516020610f6083398151915201548252506020919091526040812081815560018101829055600201555b600101610eaf565b5050506001016104f0565b610104805460008083559190915261049e90600080516020610f6083398151915290810190610a2656004c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe";
    String contractPayload = "606060405236156100b95760e060020a6000350463173825d9811461010b5780632f54bf6e146101665780634123cb6b1461018e5780635c52c2f5146101975780637065cb48146101c8578063746c9171146101fc578063797af62714610205578063b20d30a914610218578063b61d27f61461024c578063b75c7dc61461026d578063ba51a6df1461029c578063c2cf7326146102d0578063cbf0b0c01461030e578063f00d4b5d14610342578063f1736d861461037b575b61038560003411156101095760408051600160a060020a033216815234602082015281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a15b565b61038560043560006000364360405180848480828437505050909101908152604051908190036020019020905061068a815b600160a060020a03321660009081526101026020526040812054818082811415610c0057610d58565b6103876004355b600160a060020a03811660009081526101026020526040812054115b919050565b61038760015481565b610385600036436040518084848082843750505090910190815260405190819003602001902090506107db8161013d565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506106028161013d565b61038760005481565b6103876004355b600081610a3e8161013d565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506107cf8161013d565b6103876004803590602480359160443591820191013560006107fa3261016d565b610385600435600160a060020a0332166000908152610102602052604081205490808281141561039957610418565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506107498161013d565b610387600435602435600082815261010360209081526040808320600160a060020a038516845261010290925282205482818114156107a2576107c6565b610385600435600036436040518084848082843750505090910190815260405190819003602001902090506107e98161013d565b6103856004356024356000600036436040518084848082843750505090910190815260405190819003602001902090506104a38161013d565b6103876101055481565b005b60408051918252519081900360200190f35b50506000828152610103602052604081206001810154600284900a9290831611156104185780546001828101805492909101835590839003905560408051600160a060020a03321681526020810186905281517fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b929181900390910190a15b50505050565b600160a060020a03831660028361010081101561000257508301819055600160a060020a03851660008181526101026020908152604080832083905584835291829020869055815192835282019290925281517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c929181900390910190a1505b505050565b15610418576104b18361016d565b156104bc575061049e565b600160a060020a0384166000908152610102602052604081205492508214156104e5575061049e565b61041e5b6101045460005b81811015610ea557610104805461010891600091849081101561000257600080516020610f6083398151915201548252506020918252604081208054600160a060020a0319168155600181018290556002810180548382559083528383209193610f2a92601f9290920104810190610a26565b60018054810190819055600160a060020a038316906002906101008110156100025790900160005081905550600160005054610102600050600084600160a060020a03168152602001908152602001600020600050819055507f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c3826040518082600160a060020a0316815260200191505060405180910390a15b505b50565b156105fd576106108261016d565b1561061b57506105ff565b6106236104e9565b60015460fa90106106385761063661064d565b505b60015460fa901061056357506105ff565b6107075b600060015b600154811015610a3a575b6001548110801561067d5750600281610100811015610002570154600014155b15610d605760010161065d565b1561049e57600160a060020a0383166000908152610102602052604081205492508214156106b857506105fd565b60016001600050540360006000505411156106d357506105fd565b600060028361010081101561000257508301819055600160a060020a038416815261010260205260408120556106496104e9565b5060408051600160a060020a038516815290517f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da9181900360200190a1505050565b156105fd5760015482111561075e57506105ff565b600082905561076b6104e9565b6040805183815290517facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da9181900360200190a15050565b506001820154600282900a908116600014156107c157600093506107c6565b600193505b50505092915050565b156105fd575061010555565b156105ff5760006101065550565b156105fd5781600160a060020a0316ff5b15610a165761080e846000610e3a3261016d565b156108ca577f92ca3a80853e6663fa31fa10b99225f18d4902939b4c53a9caae9043f6efd00432858786866040518086600160a060020a0316815260200185815260200184600160a060020a031681526020018060200182810382528484828181526020019250808284378201915050965050505050505060405180910390a184600160a060020a03168484846040518083838082843750505090810191506000908083038185876185025a03f15060009350610a1692505050565b600036436040518084848082843750505090910190815260405190819003602001902091506108fa90508161020c565b15801561091d575060008181526101086020526040812054600160a060020a0316145b15610a165760008181526101086020908152604082208054600160a060020a03191688178155600181018790556002018054858255818452928290209092601f01919091048101908490868215610a1e579182015b82811115610a1e578235826000505591602001919060010190610972565b50507f1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf328132868887876040518087815260200186600160a060020a0316815260200185815260200184600160a060020a03168152602001806020018281038252848482818152602001925080828437820191505097505050505050505060405180910390a15b949350505050565b506109909291505b80821115610a3a5760008155600101610a26565b5090565b15610bed5760008381526101086020526040812054600160a060020a031614610bed5760408051600091909120805460018201546002929092018054600160a060020a0392909216939091819083908015610abe57820191906000526020600020905b815481529060010190602001808311610aa157829003601f168201915b505091505060006040518083038185876185025a03f150505060008481526101086020908152604080519281902080546001820154600160a060020a033281811688529587018b905293860181905292166060850181905260a06080860181815260029390930180549187018290527fe7c957c06e9a662c1a6c77366179f5b702b97651dc28eee7d5bf1dff6e40bb4a975094958a959293909160c083019084908015610b9057820191906000526020600020905b815481529060010190602001808311610b7357829003601f168201915b5050965050505050505060405180910390a160008381526101086020908152604082208054600160a060020a031916815560018101839055600281018054848255908452828420919392610bf392601f9290920104810190610a26565b50919050565b5050506001915050610189565b60008581526101036020526040812080549093501415610c88576000805483556001838101919091556101048054918201808255828015829011610c5757818360005260206000209182019101610c579190610a26565b50505060028301819055610104805487929081101561000257600091909152600080516020610f6083398151915201555b506001810154600283900a90811660001415610d585760408051600160a060020a03321681526020810187905281517fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda929181900390910190a1815460019011610d45576000858152610103602052604090206002015461010480549091908110156100025760406000908120600080516020610f608339815191529290920181905580825560018083018290556002909201559450610d589050565b8154600019018255600182018054821790555b505050919050565b5b60018054118015610d8357506001546002906101008110156100025701546000145b15610d975760018054600019019055610d61565b60015481108015610dba5750600154600290610100811015610002570154600014155b8015610dd457506002816101008110156100025701546000145b15610e3557600154600290610100811015610002578101549082610100811015610002578101919091558190610102906000908361010081101561000257810154825260209290925260408120929092556001546101008110156100025701555b610652565b156101895761010754610e505b62015180420490565b1115610e6957600061010655610e64610e47565b610107555b6101065480830110801590610e875750610106546101055490830111155b15610e9d57506101068054820190556001610189565b506000610189565b6105fd6101045460005b81811015610f355761010480548290811015610002576000918252600080516020610f60833981519152015414610f2257610104805461010391600091849081101561000257600080516020610f6083398151915201548252506020919091526040812081815560018101829055600201555b600101610eaf565b5050506001016104f0565b610104805460008083559190915261049e90600080516020610f6083398151915290810190610a2656004c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe";
    String accountOffset = String.format("%64s",  "60").replace(' ', '0');
    String requiredSigs = ByteUtilities.toHexString(BigInteger.valueOf(config.getMsigsRequired()).toByteArray());
    requiredSigs = String.format("%64s", requiredSigs).replace(' ', '0');
    String dailyLimit = String.format("%064d", 0);
    String numberOfAddresses = ByteUtilities.toHexString(BigInteger.valueOf(config.getMsigAddresses().length + 1).toByteArray());
    numberOfAddresses = String.format("%64s", numberOfAddresses).replace(' ', '0');
    String[] addressesUsed = new String[config.getMsigAddresses().length + 1];
    addressesUsed[0] = String.format("%64s",  addresses.iterator().next()).replace(' ', '0');
    for(int i = 0; i < config.getMsigAddresses().length; i++) {
      addressesUsed[i+1] = String.format("%64s",  config.getMsigAddresses()[i]).replace(' ', '0');
    }
    String contractCode = contractInit + contractPayload + accountOffset + requiredSigs + dailyLimit + numberOfAddresses;
    for(String addr : addressesUsed){
      contractCode += addr;
    }
    RLPItem data = new RLPItem(ByteUtilities.toByteArray(contractCode));

    tx.add(nonce);
    tx.add(gasPrice);
    tx.add(gasLimit);
    tx.add(to);
    tx.add(value);
    tx.add(data);
    
    String signedTx = signTransaction(ByteUtilities.toHexString(tx.encode()), config.getContractAccount());
    
    // So according to yellow paper... address should be RLP(Sender, nonce)
    tx = (RLPList)RLP.parseArray(ByteUtilities.toByteArray(signedTx));
    nonce = (RLPItem)tx.get(0);
    
    RLPList contractAddress = new RLPList();
    RLPItem contractCreator = new RLPItem(ByteUtilities.toByteArray(config.getContractAccount()));
    contractAddress.add(contractCreator);
    contractAddress.add(nonce);
    
    sendTransaction(signedTx);
    
    String contract = DeterministicTools.hashSha3(ByteUtilities.toHexString(contractAddress.encode())).substring(96/4, 256/4);
    msigContracts.put(addresses.iterator().next(), contract);
    return contract;
  }

  @Override
  public String getBalance(String address) {
    // Get latest block
    BigInteger latestBlockNumber =
        new BigInteger("00" + ethereumRpc.eth_blockNumber().substring(2), 16);
    BigInteger confirmedBlockNumber =
        latestBlockNumber.subtract(BigInteger.valueOf(config.getMinConfirmations()));

    // Get balance at latest & latest - (min conf)
    BigInteger latestBalance = new BigInteger("00"
        + ethereumRpc.eth_getBalance(address, "0x" + latestBlockNumber.toString(16)).substring(2),
        16);
    BigInteger confirmedBalance = new BigInteger("00" + ethereumRpc
        .eth_getBalance(address, "0x" + confirmedBlockNumber.toString(16)).substring(2), 16);

    // convert to Ether and return the lower of the two
    confirmedBalance = confirmedBalance.min(latestBalance);
    BigDecimal etherBalance = new BigDecimal(confirmedBalance).divide(BigDecimal.valueOf(config.getWeiMultiplier()));
    return etherBalance.toPlainString();
  }

  @Override
  public String createTransaction(Iterable<String> fromAddress, String toAddress,
      BigDecimal amount) {
    
    // TODO lookup if the intended sender is on the msig list
    //      if they are, call the appropriate contract function and submit it.
    String senderAddress = fromAddress.iterator().next();
    boolean isMsigSender = false;
    LinkedList<String> possibleSenders = new LinkedList<>();
    msigContracts.forEach((user, msig) -> {
      if(msig.equalsIgnoreCase(senderAddress))  {
        possibleSenders.add(user);
      }
    });
    if(!possibleSenders.isEmpty()) {
      isMsigSender = true;
    }

    // function addresses for the current planned contract:
    /* 7065cb48 addOwner(address)
       f00d4b5d changeOwner(address,address)
       ba51a6df changeRequirement(uint256)
       797af627 confirm(bytes32)
       b61d27f6 execute(address,uint256,bytes)
       c2cf7326 hasConfirmed(bytes32,address)
       2f54bf6e isOwner(address)
       cbf0b0c0 kill(address)
       f1736d86 m_dailyLimit()
       4123cb6b m_numOwners()
       746c9171 m_required()
       173825d9 removeOwner(address)
       5c52c2f5 resetSpentToday()
       b75c7dc6 revoke(bytes32)
       b20d30a9 setDailyLimit(uint256) */
    
    BigDecimal amountWei = amount.multiply(BigDecimal.valueOf(config.getWeiMultiplier()));

    // Create the transaction structure and serialize it
    RLPList tx = new RLPList();
    RLPItem nonce = new RLPItem();
    RLPItem gasPrice = new RLPItem(ByteUtilities
        .stripLeadingNullBytes(BigInteger.valueOf(config.getGasPrice()).toByteArray()));
    RLPItem gasLimit = new RLPItem(ByteUtilities
        .stripLeadingNullBytes(BigInteger.valueOf(config.getSimpleTxGas()).toByteArray()));
    RLPItem to = new RLPItem(
        ByteUtilities.stripLeadingNullBytes(new BigInteger(toAddress, 16).toByteArray()));
    RLPItem value = new RLPItem(ByteUtilities
        .stripLeadingNullBytes(BigInteger.valueOf(amountWei.longValue()).toByteArray()));
    RLPItem data = new RLPItem();
    
    if(isMsigSender){
      // move things around to match the contract
      gasLimit = new RLPItem(ByteUtilities
          .stripLeadingNullBytes(BigInteger.valueOf(config.getMsigTxGas()).toByteArray()));
      value = new RLPItem();
      // data... b61d27f6 execute(address,uint256,bytes)
      String dataString = "b61d27f600000000000000000000000000000000000000000000000000000000";
      dataString += String.format("%64s", toAddress).replace(' ', '0');
      dataString += String.format("%64s", ByteUtilities.toHexString(BigInteger.valueOf(amountWei.longValue()).toByteArray())).replace(' ', '0');
      dataString += "0000000000000000000000000000000000000000000000000000000000000000";
      data = new RLPItem(ByteUtilities.toByteArray(dataString));
      
      to = new RLPItem(
        ByteUtilities.stripLeadingNullBytes(new BigInteger(senderAddress, 16).toByteArray()));
      
    }

    tx.add(nonce);
    tx.add(gasPrice);
    tx.add(gasLimit);
    tx.add(to);
    tx.add(value);
    tx.add(data);

    return ByteUtilities.toHexString(tx.encode());
  }

  @Override
  public String signTransaction(String transaction, String address) {
    // Validate the transaction data
    RLPEntity decodedTransaction = RLP.parseArray(ByteUtilities.toByteArray(transaction));
    if (decodedTransaction == null || decodedTransaction.getClass() != RLPList.class
        || ((RLPList) decodedTransaction).size() < 6) {
      return "";
    }

    // Get the sigHash.
    // TODO create a TX class that knows how to do this.
    RLPList sigTx = new RLPList();
    sigTx.add(((RLPList) decodedTransaction).get(0)); // nonce
    sigTx.add(((RLPList) decodedTransaction).get(1)); // gasPrice
    sigTx.add(((RLPList) decodedTransaction).get(2)); // gasLimit
    sigTx.add(((RLPList) decodedTransaction).get(3)); // to
    sigTx.add(((RLPList) decodedTransaction).get(4)); // value
    sigTx.add(((RLPList) decodedTransaction).get(5)); // data

    String txCount =
        ethereumRpc.eth_getTransactionCount("0x" + address, DefaultBlock.latest.toString());
    BigInteger nonce = new BigInteger(1, ByteUtilities.toByteArray(txCount));
    if(nonce.equals(BigInteger.ZERO)) {
      sigTx.get(0).setDecodedContents(new byte[] {});
    } else {
      sigTx.get(0).setDecodedContents(ByteUtilities.stripLeadingNullBytes(nonce.toByteArray()));
    }

    String sigString = ByteUtilities.toHexString(sigTx.encode());
    sigString = DeterministicTools.hashSha3(sigString);
    String sig = ethereumRpc.eth_sign("0x" + address, sigString);
    byte[] sigBytes = ByteUtilities.toByteArray(sig);

    byte[] sigR = Arrays.copyOfRange(sigBytes, 0, 32);
    byte[] sigS = Arrays.copyOfRange(sigBytes, 32, 64);
    byte[] sigV = Arrays.copyOfRange(sigBytes, 64, 65);

    // convert recoveryId, because it has to be 27/28.
    sigV[0] += 27;
    RLPItem recId = new RLPItem(sigV);
    RLPItem r = new RLPItem(sigR);
    RLPItem s = new RLPItem(sigS);

    sigTx.add(recId);
    sigTx.add(r);
    sigTx.add(s);

    return ByteUtilities.toHexString(sigTx.encode());
  }

  @Override
  public String signTransaction(String transaction, String address, String name) {
    // Validate the transaction data
    RLPEntity decodedTransaction = RLP.parseArray(ByteUtilities.toByteArray(transaction));
    if (decodedTransaction == null || decodedTransaction.getClass() != RLPList.class
        || ((RLPList) decodedTransaction).size() < 6) {
      return "";
    }

    // Get the sigHash.
    // TODO create a TX class that knows how to do this.
    RLPList sigTx = new RLPList();
    sigTx.add(((RLPList) decodedTransaction).get(0)); // nonce
    sigTx.add(((RLPList) decodedTransaction).get(1)); // gasPrice
    sigTx.add(((RLPList) decodedTransaction).get(2)); // gasLimit
    sigTx.add(((RLPList) decodedTransaction).get(3)); // to
    sigTx.add(((RLPList) decodedTransaction).get(4)); // value
    sigTx.add(((RLPList) decodedTransaction).get(5)); // data

    String txCount =
        ethereumRpc.eth_getTransactionCount("0x" + address, DefaultBlock.latest.toString());
    BigInteger nonce = new BigInteger(1, ByteUtilities.toByteArray(txCount));
    if(nonce.equals(BigInteger.ZERO)) {
      sigTx.get(0).setDecodedContents(new byte[] {});
    } else {
      sigTx.get(0).setDecodedContents(ByteUtilities.stripLeadingNullBytes(nonce.toByteArray()));
    }

    String sigString = ByteUtilities.toHexString(sigTx.encode());
    sigString = DeterministicTools.hashSha3(sigString);

    // Determine the private key to use
    int rounds = 1;
    if (addressRounds.containsKey(name)) {
      rounds = addressRounds.get(name);
    }
    String privateKey = "";
    for (int i = 0; i < rounds; i++) {
      String privateKeyCheck =
          DeterministicTools.getDeterministicPrivateKey(name, config.getServerPrivateKey(), i);
      if (DeterministicTools.getPublicAddress(privateKeyCheck).equals(address)) {
        privateKey = privateKeyCheck;
        break;
      }
    }
    if (privateKey == "") {
      return "";
    }

    // Sign and return it
    byte[] privateBytes = ByteUtilities.toByteArray(privateKey);
    byte[] sigBytes = ByteUtilities.toByteArray(sigString);
    byte[] sig = Secp256k1.signTransaction(sigBytes, privateBytes);

    byte[] recoveryId = Arrays.copyOfRange(sig, 0, 1);
    byte[] sigR = Arrays.copyOfRange(sig, 1, 33);
    byte[] sigS = Arrays.copyOfRange(sig, 33, 65);

    RLPItem recId = new RLPItem(recoveryId);
    RLPItem r = new RLPItem(sigR);
    RLPItem s = new RLPItem(sigS);

    sigTx.add(recId);
    sigTx.add(r);
    sigTx.add(s);

    return ByteUtilities.toHexString(sigTx.encode());
  }

  @Override
  public String sendTransaction(String transaction) {
    return ethereumRpc.eth_sendRawTransaction(transaction);
  }

}
